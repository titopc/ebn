'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.261
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="EBeneSystems")>  _
Partial Public Class SQLDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblAgentInfo(instance As tblAgentInfo)
    End Sub
  Partial Private Sub UpdatetblAgentInfo(instance As tblAgentInfo)
    End Sub
  Partial Private Sub DeletetblAgentInfo(instance As tblAgentInfo)
    End Sub
  Partial Private Sub InserttblState(instance As tblState)
    End Sub
  Partial Private Sub UpdatetblState(instance As tblState)
    End Sub
  Partial Private Sub DeletetblState(instance As tblState)
    End Sub
  Partial Private Sub InserttblBenefit(instance As tblBenefit)
    End Sub
  Partial Private Sub UpdatetblBenefit(instance As tblBenefit)
    End Sub
  Partial Private Sub DeletetblBenefit(instance As tblBenefit)
    End Sub
  Partial Private Sub InserttblBenefitsDetail(instance As tblBenefitsDetail)
    End Sub
  Partial Private Sub UpdatetblBenefitsDetail(instance As tblBenefitsDetail)
    End Sub
  Partial Private Sub DeletetblBenefitsDetail(instance As tblBenefitsDetail)
    End Sub
  Partial Private Sub InserttblBenefitsRate(instance As tblBenefitsRate)
    End Sub
  Partial Private Sub UpdatetblBenefitsRate(instance As tblBenefitsRate)
    End Sub
  Partial Private Sub DeletetblBenefitsRate(instance As tblBenefitsRate)
    End Sub
  Partial Private Sub InserttblBenefitsType(instance As tblBenefitsType)
    End Sub
  Partial Private Sub UpdatetblBenefitsType(instance As tblBenefitsType)
    End Sub
  Partial Private Sub DeletetblBenefitsType(instance As tblBenefitsType)
    End Sub
  Partial Private Sub InserttblClientInfo(instance As tblClientInfo)
    End Sub
  Partial Private Sub UpdatetblClientInfo(instance As tblClientInfo)
    End Sub
  Partial Private Sub DeletetblClientInfo(instance As tblClientInfo)
    End Sub
  Partial Private Sub InserttblCoverageType(instance As tblCoverageType)
    End Sub
  Partial Private Sub UpdatetblCoverageType(instance As tblCoverageType)
    End Sub
  Partial Private Sub DeletetblCoverageType(instance As tblCoverageType)
    End Sub
  Partial Private Sub InserttblDependent(instance As tblDependent)
    End Sub
  Partial Private Sub UpdatetblDependent(instance As tblDependent)
    End Sub
  Partial Private Sub DeletetblDependent(instance As tblDependent)
    End Sub
  Partial Private Sub InserttblElection(instance As tblElection)
    End Sub
  Partial Private Sub UpdatetblElection(instance As tblElection)
    End Sub
  Partial Private Sub DeletetblElection(instance As tblElection)
    End Sub
  Partial Private Sub InserttblEmployee(instance As tblEmployee)
    End Sub
  Partial Private Sub UpdatetblEmployee(instance As tblEmployee)
    End Sub
  Partial Private Sub DeletetblEmployee(instance As tblEmployee)
    End Sub
  Partial Private Sub InserttblEnrollmentInfo(instance As tblEnrollmentInfo)
    End Sub
  Partial Private Sub UpdatetblEnrollmentInfo(instance As tblEnrollmentInfo)
    End Sub
  Partial Private Sub DeletetblEnrollmentInfo(instance As tblEnrollmentInfo)
    End Sub
  Partial Private Sub InserttblEnrollment(instance As tblEnrollment)
    End Sub
  Partial Private Sub UpdatetblEnrollment(instance As tblEnrollment)
    End Sub
  Partial Private Sub DeletetblEnrollment(instance As tblEnrollment)
    End Sub
  Partial Private Sub InserttblGender(instance As tblGender)
    End Sub
  Partial Private Sub UpdatetblGender(instance As tblGender)
    End Sub
  Partial Private Sub DeletetblGender(instance As tblGender)
    End Sub
  Partial Private Sub InserttblRelationship(instance As tblRelationship)
    End Sub
  Partial Private Sub UpdatetblRelationship(instance As tblRelationship)
    End Sub
  Partial Private Sub DeletetblRelationship(instance As tblRelationship)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("EBeneSystemsConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblAgentInfos() As System.Data.Linq.Table(Of tblAgentInfo)
		Get
			Return Me.GetTable(Of tblAgentInfo)
		End Get
	End Property
	
	Public ReadOnly Property tblStates() As System.Data.Linq.Table(Of tblState)
		Get
			Return Me.GetTable(Of tblState)
		End Get
	End Property
	
	Public ReadOnly Property tblBeneficiariesPBs() As System.Data.Linq.Table(Of tblBeneficiariesPB)
		Get
			Return Me.GetTable(Of tblBeneficiariesPB)
		End Get
	End Property
	
	Public ReadOnly Property tblBenefits() As System.Data.Linq.Table(Of tblBenefit)
		Get
			Return Me.GetTable(Of tblBenefit)
		End Get
	End Property
	
	Public ReadOnly Property tblBenefitsDetails() As System.Data.Linq.Table(Of tblBenefitsDetail)
		Get
			Return Me.GetTable(Of tblBenefitsDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblBenefitsRates() As System.Data.Linq.Table(Of tblBenefitsRate)
		Get
			Return Me.GetTable(Of tblBenefitsRate)
		End Get
	End Property
	
	Public ReadOnly Property tblBenefitsTypes() As System.Data.Linq.Table(Of tblBenefitsType)
		Get
			Return Me.GetTable(Of tblBenefitsType)
		End Get
	End Property
	
	Public ReadOnly Property tblClientInfos() As System.Data.Linq.Table(Of tblClientInfo)
		Get
			Return Me.GetTable(Of tblClientInfo)
		End Get
	End Property
	
	Public ReadOnly Property tblCoverageTypes() As System.Data.Linq.Table(Of tblCoverageType)
		Get
			Return Me.GetTable(Of tblCoverageType)
		End Get
	End Property
	
	Public ReadOnly Property tblDependentPBs() As System.Data.Linq.Table(Of tblDependentPB)
		Get
			Return Me.GetTable(Of tblDependentPB)
		End Get
	End Property
	
	Public ReadOnly Property tblDependents() As System.Data.Linq.Table(Of tblDependent)
		Get
			Return Me.GetTable(Of tblDependent)
		End Get
	End Property
	
	Public ReadOnly Property tblElections() As System.Data.Linq.Table(Of tblElection)
		Get
			Return Me.GetTable(Of tblElection)
		End Get
	End Property
	
	Public ReadOnly Property tblEmployees() As System.Data.Linq.Table(Of tblEmployee)
		Get
			Return Me.GetTable(Of tblEmployee)
		End Get
	End Property
	
	Public ReadOnly Property tblEnrollmentInfos() As System.Data.Linq.Table(Of tblEnrollmentInfo)
		Get
			Return Me.GetTable(Of tblEnrollmentInfo)
		End Get
	End Property
	
	Public ReadOnly Property tblEnrollments() As System.Data.Linq.Table(Of tblEnrollment)
		Get
			Return Me.GetTable(Of tblEnrollment)
		End Get
	End Property
	
	Public ReadOnly Property tblGenders() As System.Data.Linq.Table(Of tblGender)
		Get
			Return Me.GetTable(Of tblGender)
		End Get
	End Property
	
	Public ReadOnly Property tblLicenseStates() As System.Data.Linq.Table(Of tblLicenseState)
		Get
			Return Me.GetTable(Of tblLicenseState)
		End Get
	End Property
	
	Public ReadOnly Property tblRelationships() As System.Data.Linq.Table(Of tblRelationship)
		Get
			Return Me.GetTable(Of tblRelationship)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAgentInfo")>  _
Partial Public Class tblAgentInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _strAgentSSN As String
	
	Private _strAgentFName As String
	
	Private _strAgentLName As String
	
	Private _tblEnrollments As EntitySet(Of tblEnrollment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstrAgentSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrAgentSSNChanged()
    End Sub
    Partial Private Sub OnstrAgentFNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrAgentFNameChanged()
    End Sub
    Partial Private Sub OnstrAgentLNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrAgentLNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblEnrollments = New EntitySet(Of tblEnrollment)(AddressOf Me.attach_tblEnrollments, AddressOf Me.detach_tblEnrollments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAgentSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property strAgentSSN() As String
		Get
			Return Me._strAgentSSN
		End Get
		Set
			If (String.Equals(Me._strAgentSSN, value) = false) Then
				Me.OnstrAgentSSNChanging(value)
				Me.SendPropertyChanging
				Me._strAgentSSN = value
				Me.SendPropertyChanged("strAgentSSN")
				Me.OnstrAgentSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAgentFName", DbType:="NVarChar(20)")>  _
	Public Property strAgentFName() As String
		Get
			Return Me._strAgentFName
		End Get
		Set
			If (String.Equals(Me._strAgentFName, value) = false) Then
				Me.OnstrAgentFNameChanging(value)
				Me.SendPropertyChanging
				Me._strAgentFName = value
				Me.SendPropertyChanged("strAgentFName")
				Me.OnstrAgentFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAgentLName", DbType:="NVarChar(25)")>  _
	Public Property strAgentLName() As String
		Get
			Return Me._strAgentLName
		End Get
		Set
			If (String.Equals(Me._strAgentLName, value) = false) Then
				Me.OnstrAgentLNameChanging(value)
				Me.SendPropertyChanging
				Me._strAgentLName = value
				Me.SendPropertyChanged("strAgentLName")
				Me.OnstrAgentLNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblAgentInfo_tblEnrollment", Storage:="_tblEnrollments", ThisKey:="strAgentSSN", OtherKey:="strAgentSSN")>  _
	Public Property tblEnrollments() As EntitySet(Of tblEnrollment)
		Get
			Return Me._tblEnrollments
		End Get
		Set
			Me._tblEnrollments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblAgentInfo = Me
	End Sub
	
	Private Sub detach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblAgentInfo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStates")>  _
Partial Public Class tblState
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intStateID As Integer
	
	Private _strStateName As String
	
	Private _strStateAbbrv As String
	
	Private _tblEnrollments As EntitySet(Of tblEnrollment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintStateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintStateIDChanged()
    End Sub
    Partial Private Sub OnstrStateNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrStateNameChanged()
    End Sub
    Partial Private Sub OnstrStateAbbrvChanging(value As String)
    End Sub
    Partial Private Sub OnstrStateAbbrvChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblEnrollments = New EntitySet(Of tblEnrollment)(AddressOf Me.attach_tblEnrollments, AddressOf Me.detach_tblEnrollments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intStateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intStateID() As Integer
		Get
			Return Me._intStateID
		End Get
		Set
			If ((Me._intStateID = value)  _
						= false) Then
				Me.OnintStateIDChanging(value)
				Me.SendPropertyChanging
				Me._intStateID = value
				Me.SendPropertyChanged("intStateID")
				Me.OnintStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strStateName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property strStateName() As String
		Get
			Return Me._strStateName
		End Get
		Set
			If (String.Equals(Me._strStateName, value) = false) Then
				Me.OnstrStateNameChanging(value)
				Me.SendPropertyChanging
				Me._strStateName = value
				Me.SendPropertyChanged("strStateName")
				Me.OnstrStateNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strStateAbbrv", DbType:="NChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property strStateAbbrv() As String
		Get
			Return Me._strStateAbbrv
		End Get
		Set
			If (String.Equals(Me._strStateAbbrv, value) = false) Then
				Me.OnstrStateAbbrvChanging(value)
				Me.SendPropertyChanging
				Me._strStateAbbrv = value
				Me.SendPropertyChanged("strStateAbbrv")
				Me.OnstrStateAbbrvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblState_tblEnrollment", Storage:="_tblEnrollments", ThisKey:="intStateID", OtherKey:="intState")>  _
	Public Property tblEnrollments() As EntitySet(Of tblEnrollment)
		Get
			Return Me._tblEnrollments
		End Get
		Set
			Me._tblEnrollments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblState = Me
	End Sub
	
	Private Sub detach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblState = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBeneficiariesPB")>  _
Partial Public Class tblBeneficiariesPB
	
	Private _strEmployeeSSN As String
	
	Private _strDependentSSN As String
	
	Private _intEnrollment As Long
	
	Private _intBenefit As Long
	
	Private _strFName As String
	
	Private _strMName As String
	
	Private _strLName As String
	
	Private _strDOB As Date
	
	Private _intRelationship As Integer
	
	Private _intGender As Short
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmployeeSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strEmployeeSSN() As String
		Get
			Return Me._strEmployeeSSN
		End Get
		Set
			If (String.Equals(Me._strEmployeeSSN, value) = false) Then
				Me._strEmployeeSSN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDependentSSN", DbType:="NChar(9)")>  _
	Public Property strDependentSSN() As String
		Get
			Return Me._strDependentSSN
		End Get
		Set
			If (String.Equals(Me._strDependentSSN, value) = false) Then
				Me._strDependentSSN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intEnrollment", DbType:="BigInt NOT NULL")>  _
	Public Property intEnrollment() As Long
		Get
			Return Me._intEnrollment
		End Get
		Set
			If ((Me._intEnrollment = value)  _
						= false) Then
				Me._intEnrollment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefit", DbType:="BigInt NOT NULL")>  _
	Public Property intBenefit() As Long
		Get
			Return Me._intBenefit
		End Get
		Set
			If ((Me._intBenefit = value)  _
						= false) Then
				Me._intBenefit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strFName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property strFName() As String
		Get
			Return Me._strFName
		End Get
		Set
			If (String.Equals(Me._strFName, value) = false) Then
				Me._strFName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strMName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property strMName() As String
		Get
			Return Me._strMName
		End Get
		Set
			If (String.Equals(Me._strMName, value) = false) Then
				Me._strMName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strLName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property strLName() As String
		Get
			Return Me._strLName
		End Get
		Set
			If (String.Equals(Me._strLName, value) = false) Then
				Me._strLName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDOB", DbType:="Date NOT NULL")>  _
	Public Property strDOB() As Date
		Get
			Return Me._strDOB
		End Get
		Set
			If ((Me._strDOB = value)  _
						= false) Then
				Me._strDOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRelationship", DbType:="Int NOT NULL")>  _
	Public Property intRelationship() As Integer
		Get
			Return Me._intRelationship
		End Get
		Set
			If ((Me._intRelationship = value)  _
						= false) Then
				Me._intRelationship = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intGender", DbType:="SmallInt NOT NULL")>  _
	Public Property intGender() As Short
		Get
			Return Me._intGender
		End Get
		Set
			If ((Me._intGender = value)  _
						= false) Then
				Me._intGender = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBenefits")>  _
Partial Public Class tblBenefit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intBenefitID As Long
	
	Private _intBenefitType As Integer
	
	Private _strName As String
	
	Private _dtmEffective As Date
	
	Private _strDescription As String
	
	Private _intRateBase As Integer
	
	Private _intStudentAge As Integer
	
	Private _intSAE As Integer
	
	Private _intNotStudentAge As Integer
	
	Private _intNSAE As Integer
	
	Private _strSQLEligibility As String
	
	Private _bitPaperApp As Boolean
	
	Private _intOrder As Integer
	
	Private _intPrioirity As Integer
	
	Private _tblBenefitsDetails As EntitySet(Of tblBenefitsDetail)
	
	Private _tblEnrollments As EntitySet(Of tblEnrollment)
	
	Private _tblBenefitsType As EntityRef(Of tblBenefitsType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintBenefitIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintBenefitIDChanged()
    End Sub
    Partial Private Sub OnintBenefitTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnintBenefitTypeChanged()
    End Sub
    Partial Private Sub OnstrNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrNameChanged()
    End Sub
    Partial Private Sub OndtmEffectiveChanging(value As Date)
    End Sub
    Partial Private Sub OndtmEffectiveChanged()
    End Sub
    Partial Private Sub OnstrDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnstrDescriptionChanged()
    End Sub
    Partial Private Sub OnintRateBaseChanging(value As Integer)
    End Sub
    Partial Private Sub OnintRateBaseChanged()
    End Sub
    Partial Private Sub OnintStudentAgeChanging(value As Integer)
    End Sub
    Partial Private Sub OnintStudentAgeChanged()
    End Sub
    Partial Private Sub OnintSAEChanging(value As Integer)
    End Sub
    Partial Private Sub OnintSAEChanged()
    End Sub
    Partial Private Sub OnintNotStudentAgeChanging(value As Integer)
    End Sub
    Partial Private Sub OnintNotStudentAgeChanged()
    End Sub
    Partial Private Sub OnintNSAEChanging(value As Integer)
    End Sub
    Partial Private Sub OnintNSAEChanged()
    End Sub
    Partial Private Sub OnstrSQLEligibilityChanging(value As String)
    End Sub
    Partial Private Sub OnstrSQLEligibilityChanged()
    End Sub
    Partial Private Sub OnbitPaperAppChanging(value As Boolean)
    End Sub
    Partial Private Sub OnbitPaperAppChanged()
    End Sub
    Partial Private Sub OnintOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnintOrderChanged()
    End Sub
    Partial Private Sub OnintPrioirityChanging(value As Integer)
    End Sub
    Partial Private Sub OnintPrioirityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBenefitsDetails = New EntitySet(Of tblBenefitsDetail)(AddressOf Me.attach_tblBenefitsDetails, AddressOf Me.detach_tblBenefitsDetails)
		Me._tblEnrollments = New EntitySet(Of tblEnrollment)(AddressOf Me.attach_tblEnrollments, AddressOf Me.detach_tblEnrollments)
		Me._tblBenefitsType = CType(Nothing, EntityRef(Of tblBenefitsType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefitID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intBenefitID() As Long
		Get
			Return Me._intBenefitID
		End Get
		Set
			If ((Me._intBenefitID = value)  _
						= false) Then
				Me.OnintBenefitIDChanging(value)
				Me.SendPropertyChanging
				Me._intBenefitID = value
				Me.SendPropertyChanged("intBenefitID")
				Me.OnintBenefitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefitType", DbType:="Int NOT NULL")>  _
	Public Property intBenefitType() As Integer
		Get
			Return Me._intBenefitType
		End Get
		Set
			If ((Me._intBenefitType = value)  _
						= false) Then
				If Me._tblBenefitsType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintBenefitTypeChanging(value)
				Me.SendPropertyChanging
				Me._intBenefitType = value
				Me.SendPropertyChanged("intBenefitType")
				Me.OnintBenefitTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property strName() As String
		Get
			Return Me._strName
		End Get
		Set
			If (String.Equals(Me._strName, value) = false) Then
				Me.OnstrNameChanging(value)
				Me.SendPropertyChanging
				Me._strName = value
				Me.SendPropertyChanged("strName")
				Me.OnstrNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmEffective", DbType:="Date NOT NULL")>  _
	Public Property dtmEffective() As Date
		Get
			Return Me._dtmEffective
		End Get
		Set
			If ((Me._dtmEffective = value)  _
						= false) Then
				Me.OndtmEffectiveChanging(value)
				Me.SendPropertyChanging
				Me._dtmEffective = value
				Me.SendPropertyChanged("dtmEffective")
				Me.OndtmEffectiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDescription", DbType:="NVarChar(200)")>  _
	Public Property strDescription() As String
		Get
			Return Me._strDescription
		End Get
		Set
			If (String.Equals(Me._strDescription, value) = false) Then
				Me.OnstrDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._strDescription = value
				Me.SendPropertyChanged("strDescription")
				Me.OnstrDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRateBase", DbType:="Int NOT NULL")>  _
	Public Property intRateBase() As Integer
		Get
			Return Me._intRateBase
		End Get
		Set
			If ((Me._intRateBase = value)  _
						= false) Then
				Me.OnintRateBaseChanging(value)
				Me.SendPropertyChanging
				Me._intRateBase = value
				Me.SendPropertyChanged("intRateBase")
				Me.OnintRateBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intStudentAge", DbType:="Int NOT NULL")>  _
	Public Property intStudentAge() As Integer
		Get
			Return Me._intStudentAge
		End Get
		Set
			If ((Me._intStudentAge = value)  _
						= false) Then
				Me.OnintStudentAgeChanging(value)
				Me.SendPropertyChanging
				Me._intStudentAge = value
				Me.SendPropertyChanged("intStudentAge")
				Me.OnintStudentAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intSAE", DbType:="Int NOT NULL")>  _
	Public Property intSAE() As Integer
		Get
			Return Me._intSAE
		End Get
		Set
			If ((Me._intSAE = value)  _
						= false) Then
				Me.OnintSAEChanging(value)
				Me.SendPropertyChanging
				Me._intSAE = value
				Me.SendPropertyChanged("intSAE")
				Me.OnintSAEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intNotStudentAge", DbType:="Int NOT NULL")>  _
	Public Property intNotStudentAge() As Integer
		Get
			Return Me._intNotStudentAge
		End Get
		Set
			If ((Me._intNotStudentAge = value)  _
						= false) Then
				Me.OnintNotStudentAgeChanging(value)
				Me.SendPropertyChanging
				Me._intNotStudentAge = value
				Me.SendPropertyChanged("intNotStudentAge")
				Me.OnintNotStudentAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intNSAE", DbType:="Int NOT NULL")>  _
	Public Property intNSAE() As Integer
		Get
			Return Me._intNSAE
		End Get
		Set
			If ((Me._intNSAE = value)  _
						= false) Then
				Me.OnintNSAEChanging(value)
				Me.SendPropertyChanging
				Me._intNSAE = value
				Me.SendPropertyChanged("intNSAE")
				Me.OnintNSAEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strSQLEligibility", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property strSQLEligibility() As String
		Get
			Return Me._strSQLEligibility
		End Get
		Set
			If (String.Equals(Me._strSQLEligibility, value) = false) Then
				Me.OnstrSQLEligibilityChanging(value)
				Me.SendPropertyChanging
				Me._strSQLEligibility = value
				Me.SendPropertyChanged("strSQLEligibility")
				Me.OnstrSQLEligibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bitPaperApp", DbType:="Bit NOT NULL")>  _
	Public Property bitPaperApp() As Boolean
		Get
			Return Me._bitPaperApp
		End Get
		Set
			If ((Me._bitPaperApp = value)  _
						= false) Then
				Me.OnbitPaperAppChanging(value)
				Me.SendPropertyChanging
				Me._bitPaperApp = value
				Me.SendPropertyChanged("bitPaperApp")
				Me.OnbitPaperAppChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intOrder", DbType:="Int NOT NULL")>  _
	Public Property intOrder() As Integer
		Get
			Return Me._intOrder
		End Get
		Set
			If ((Me._intOrder = value)  _
						= false) Then
				Me.OnintOrderChanging(value)
				Me.SendPropertyChanging
				Me._intOrder = value
				Me.SendPropertyChanged("intOrder")
				Me.OnintOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intPrioirity", DbType:="Int NOT NULL")>  _
	Public Property intPrioirity() As Integer
		Get
			Return Me._intPrioirity
		End Get
		Set
			If ((Me._intPrioirity = value)  _
						= false) Then
				Me.OnintPrioirityChanging(value)
				Me.SendPropertyChanging
				Me._intPrioirity = value
				Me.SendPropertyChanged("intPrioirity")
				Me.OnintPrioirityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefit_tblBenefitsDetail", Storage:="_tblBenefitsDetails", ThisKey:="intBenefitID", OtherKey:="intBenefit")>  _
	Public Property tblBenefitsDetails() As EntitySet(Of tblBenefitsDetail)
		Get
			Return Me._tblBenefitsDetails
		End Get
		Set
			Me._tblBenefitsDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefit_tblEnrollment", Storage:="_tblEnrollments", ThisKey:="intBenefitID", OtherKey:="intBenefit")>  _
	Public Property tblEnrollments() As EntitySet(Of tblEnrollment)
		Get
			Return Me._tblEnrollments
		End Get
		Set
			Me._tblEnrollments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefitsType_tblBenefit", Storage:="_tblBenefitsType", ThisKey:="intBenefitType", OtherKey:="intBenefitTypeID", IsForeignKey:=true)>  _
	Public Property tblBenefitsType() As tblBenefitsType
		Get
			Return Me._tblBenefitsType.Entity
		End Get
		Set
			Dim previousValue As tblBenefitsType = Me._tblBenefitsType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBenefitsType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBenefitsType.Entity = Nothing
					previousValue.tblBenefits.Remove(Me)
				End If
				Me._tblBenefitsType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBenefits.Add(Me)
					Me._intBenefitType = value.intBenefitTypeID
				Else
					Me._intBenefitType = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBenefitsType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBenefitsDetails(ByVal entity As tblBenefitsDetail)
		Me.SendPropertyChanging
		entity.tblBenefit = Me
	End Sub
	
	Private Sub detach_tblBenefitsDetails(ByVal entity As tblBenefitsDetail)
		Me.SendPropertyChanging
		entity.tblBenefit = Nothing
	End Sub
	
	Private Sub attach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblBenefit = Me
	End Sub
	
	Private Sub detach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblBenefit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBenefitsDetail")>  _
Partial Public Class tblBenefitsDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intBenefitDetailID As Long
	
	Private _intBenefit As Long
	
	Private _intRate As Integer
	
	Private _strPlanName As String
	
	Private _tblBenefit As EntityRef(Of tblBenefit)
	
	Private _tblBenefitsRate As EntityRef(Of tblBenefitsRate)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintBenefitDetailIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintBenefitDetailIDChanged()
    End Sub
    Partial Private Sub OnintBenefitChanging(value As Long)
    End Sub
    Partial Private Sub OnintBenefitChanged()
    End Sub
    Partial Private Sub OnintRateChanging(value As Integer)
    End Sub
    Partial Private Sub OnintRateChanged()
    End Sub
    Partial Private Sub OnstrPlanNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrPlanNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBenefit = CType(Nothing, EntityRef(Of tblBenefit))
		Me._tblBenefitsRate = CType(Nothing, EntityRef(Of tblBenefitsRate))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefitDetailID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intBenefitDetailID() As Long
		Get
			Return Me._intBenefitDetailID
		End Get
		Set
			If ((Me._intBenefitDetailID = value)  _
						= false) Then
				Me.OnintBenefitDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._intBenefitDetailID = value
				Me.SendPropertyChanged("intBenefitDetailID")
				Me.OnintBenefitDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefit", DbType:="BigInt NOT NULL")>  _
	Public Property intBenefit() As Long
		Get
			Return Me._intBenefit
		End Get
		Set
			If ((Me._intBenefit = value)  _
						= false) Then
				If Me._tblBenefit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintBenefitChanging(value)
				Me.SendPropertyChanging
				Me._intBenefit = value
				Me.SendPropertyChanged("intBenefit")
				Me.OnintBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRate", DbType:="Int NOT NULL")>  _
	Public Property intRate() As Integer
		Get
			Return Me._intRate
		End Get
		Set
			If ((Me._intRate = value)  _
						= false) Then
				If Me._tblBenefitsRate.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintRateChanging(value)
				Me.SendPropertyChanging
				Me._intRate = value
				Me.SendPropertyChanged("intRate")
				Me.OnintRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strPlanName", DbType:="NVarChar(15)")>  _
	Public Property strPlanName() As String
		Get
			Return Me._strPlanName
		End Get
		Set
			If (String.Equals(Me._strPlanName, value) = false) Then
				Me.OnstrPlanNameChanging(value)
				Me.SendPropertyChanging
				Me._strPlanName = value
				Me.SendPropertyChanged("strPlanName")
				Me.OnstrPlanNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefit_tblBenefitsDetail", Storage:="_tblBenefit", ThisKey:="intBenefit", OtherKey:="intBenefitID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tblBenefit() As tblBenefit
		Get
			Return Me._tblBenefit.Entity
		End Get
		Set
			Dim previousValue As tblBenefit = Me._tblBenefit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBenefit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBenefit.Entity = Nothing
					previousValue.tblBenefitsDetails.Remove(Me)
				End If
				Me._tblBenefit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBenefitsDetails.Add(Me)
					Me._intBenefit = value.intBenefitID
				Else
					Me._intBenefit = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("tblBenefit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefitsRate_tblBenefitsDetail", Storage:="_tblBenefitsRate", ThisKey:="intRate", OtherKey:="intRateID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tblBenefitsRate() As tblBenefitsRate
		Get
			Return Me._tblBenefitsRate.Entity
		End Get
		Set
			Dim previousValue As tblBenefitsRate = Me._tblBenefitsRate.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBenefitsRate.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBenefitsRate.Entity = Nothing
					previousValue.tblBenefitsDetails.Remove(Me)
				End If
				Me._tblBenefitsRate.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBenefitsDetails.Add(Me)
					Me._intRate = value.intRateID
				Else
					Me._intRate = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBenefitsRate")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBenefitsRates")>  _
Partial Public Class tblBenefitsRate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intRateID As Integer
	
	Private _intBenefitDetail As Long
	
	Private _intAgeFrom As Integer
	
	Private _intAgeTo As Integer
	
	Private _intCoverageType As Integer
	
	Private _dblEERate As Decimal
	
	Private _dblERRate As Decimal
	
	Private _tblBenefitsDetails As EntitySet(Of tblBenefitsDetail)
	
	Private _tblCoverageType As EntityRef(Of tblCoverageType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintRateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintRateIDChanged()
    End Sub
    Partial Private Sub OnintBenefitDetailChanging(value As Long)
    End Sub
    Partial Private Sub OnintBenefitDetailChanged()
    End Sub
    Partial Private Sub OnintAgeFromChanging(value As Integer)
    End Sub
    Partial Private Sub OnintAgeFromChanged()
    End Sub
    Partial Private Sub OnintAgeToChanging(value As Integer)
    End Sub
    Partial Private Sub OnintAgeToChanged()
    End Sub
    Partial Private Sub OnintCoverageTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnintCoverageTypeChanged()
    End Sub
    Partial Private Sub OndblEERateChanging(value As Decimal)
    End Sub
    Partial Private Sub OndblEERateChanged()
    End Sub
    Partial Private Sub OndblERRateChanging(value As Decimal)
    End Sub
    Partial Private Sub OndblERRateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBenefitsDetails = New EntitySet(Of tblBenefitsDetail)(AddressOf Me.attach_tblBenefitsDetails, AddressOf Me.detach_tblBenefitsDetails)
		Me._tblCoverageType = CType(Nothing, EntityRef(Of tblCoverageType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intRateID() As Integer
		Get
			Return Me._intRateID
		End Get
		Set
			If ((Me._intRateID = value)  _
						= false) Then
				Me.OnintRateIDChanging(value)
				Me.SendPropertyChanging
				Me._intRateID = value
				Me.SendPropertyChanged("intRateID")
				Me.OnintRateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefitDetail", DbType:="BigInt NOT NULL")>  _
	Public Property intBenefitDetail() As Long
		Get
			Return Me._intBenefitDetail
		End Get
		Set
			If ((Me._intBenefitDetail = value)  _
						= false) Then
				Me.OnintBenefitDetailChanging(value)
				Me.SendPropertyChanging
				Me._intBenefitDetail = value
				Me.SendPropertyChanged("intBenefitDetail")
				Me.OnintBenefitDetailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intAgeFrom", DbType:="Int NOT NULL")>  _
	Public Property intAgeFrom() As Integer
		Get
			Return Me._intAgeFrom
		End Get
		Set
			If ((Me._intAgeFrom = value)  _
						= false) Then
				Me.OnintAgeFromChanging(value)
				Me.SendPropertyChanging
				Me._intAgeFrom = value
				Me.SendPropertyChanged("intAgeFrom")
				Me.OnintAgeFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intAgeTo", DbType:="Int NOT NULL")>  _
	Public Property intAgeTo() As Integer
		Get
			Return Me._intAgeTo
		End Get
		Set
			If ((Me._intAgeTo = value)  _
						= false) Then
				Me.OnintAgeToChanging(value)
				Me.SendPropertyChanging
				Me._intAgeTo = value
				Me.SendPropertyChanged("intAgeTo")
				Me.OnintAgeToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intCoverageType", DbType:="Int NOT NULL")>  _
	Public Property intCoverageType() As Integer
		Get
			Return Me._intCoverageType
		End Get
		Set
			If ((Me._intCoverageType = value)  _
						= false) Then
				If Me._tblCoverageType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintCoverageTypeChanging(value)
				Me.SendPropertyChanging
				Me._intCoverageType = value
				Me.SendPropertyChanged("intCoverageType")
				Me.OnintCoverageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblEERate", DbType:="SmallMoney NOT NULL")>  _
	Public Property dblEERate() As Decimal
		Get
			Return Me._dblEERate
		End Get
		Set
			If ((Me._dblEERate = value)  _
						= false) Then
				Me.OndblEERateChanging(value)
				Me.SendPropertyChanging
				Me._dblEERate = value
				Me.SendPropertyChanged("dblEERate")
				Me.OndblEERateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblERRate", DbType:="SmallMoney NOT NULL")>  _
	Public Property dblERRate() As Decimal
		Get
			Return Me._dblERRate
		End Get
		Set
			If ((Me._dblERRate = value)  _
						= false) Then
				Me.OndblERRateChanging(value)
				Me.SendPropertyChanging
				Me._dblERRate = value
				Me.SendPropertyChanged("dblERRate")
				Me.OndblERRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefitsRate_tblBenefitsDetail", Storage:="_tblBenefitsDetails", ThisKey:="intRateID", OtherKey:="intRate")>  _
	Public Property tblBenefitsDetails() As EntitySet(Of tblBenefitsDetail)
		Get
			Return Me._tblBenefitsDetails
		End Get
		Set
			Me._tblBenefitsDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCoverageType_tblBenefitsRate", Storage:="_tblCoverageType", ThisKey:="intCoverageType", OtherKey:="intCoverageTypeID", IsForeignKey:=true)>  _
	Public Property tblCoverageType() As tblCoverageType
		Get
			Return Me._tblCoverageType.Entity
		End Get
		Set
			Dim previousValue As tblCoverageType = Me._tblCoverageType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCoverageType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCoverageType.Entity = Nothing
					previousValue.tblBenefitsRates.Remove(Me)
				End If
				Me._tblCoverageType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBenefitsRates.Add(Me)
					Me._intCoverageType = value.intCoverageTypeID
				Else
					Me._intCoverageType = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblCoverageType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBenefitsDetails(ByVal entity As tblBenefitsDetail)
		Me.SendPropertyChanging
		entity.tblBenefitsRate = Me
	End Sub
	
	Private Sub detach_tblBenefitsDetails(ByVal entity As tblBenefitsDetail)
		Me.SendPropertyChanging
		entity.tblBenefitsRate = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBenefitsType")>  _
Partial Public Class tblBenefitsType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intBenefitTypeID As Integer
	
	Private _strName As String
	
	Private _tblBenefits As EntitySet(Of tblBenefit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintBenefitTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintBenefitTypeIDChanged()
    End Sub
    Partial Private Sub OnstrNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBenefits = New EntitySet(Of tblBenefit)(AddressOf Me.attach_tblBenefits, AddressOf Me.detach_tblBenefits)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefitTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intBenefitTypeID() As Integer
		Get
			Return Me._intBenefitTypeID
		End Get
		Set
			If ((Me._intBenefitTypeID = value)  _
						= false) Then
				Me.OnintBenefitTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._intBenefitTypeID = value
				Me.SendPropertyChanged("intBenefitTypeID")
				Me.OnintBenefitTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property strName() As String
		Get
			Return Me._strName
		End Get
		Set
			If (String.Equals(Me._strName, value) = false) Then
				Me.OnstrNameChanging(value)
				Me.SendPropertyChanging
				Me._strName = value
				Me.SendPropertyChanged("strName")
				Me.OnstrNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefitsType_tblBenefit", Storage:="_tblBenefits", ThisKey:="intBenefitTypeID", OtherKey:="intBenefitType")>  _
	Public Property tblBenefits() As EntitySet(Of tblBenefit)
		Get
			Return Me._tblBenefits
		End Get
		Set
			Me._tblBenefits.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBenefits(ByVal entity As tblBenefit)
		Me.SendPropertyChanging
		entity.tblBenefitsType = Me
	End Sub
	
	Private Sub detach_tblBenefits(ByVal entity As tblBenefit)
		Me.SendPropertyChanging
		entity.tblBenefitsType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblClientInfo")>  _
Partial Public Class tblClientInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intClientID As Long
	
	Private _strClientName As String
	
	Private _intPerpetual As System.Nullable(Of Boolean)
	
	Private _dtmPerpEffDt As System.Nullable(Of Date)
	
	Private _intAltEEID As System.Nullable(Of Boolean)
	
	Private _dtmLastUpdated As Date
	
	Private _tblEnrollmentInfos As EntitySet(Of tblEnrollmentInfo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintClientIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintClientIDChanged()
    End Sub
    Partial Private Sub OnstrClientNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrClientNameChanged()
    End Sub
    Partial Private Sub OnintPerpetualChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnintPerpetualChanged()
    End Sub
    Partial Private Sub OndtmPerpEffDtChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndtmPerpEffDtChanged()
    End Sub
    Partial Private Sub OnintAltEEIDChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnintAltEEIDChanged()
    End Sub
    Partial Private Sub OndtmLastUpdatedChanging(value As Date)
    End Sub
    Partial Private Sub OndtmLastUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblEnrollmentInfos = New EntitySet(Of tblEnrollmentInfo)(AddressOf Me.attach_tblEnrollmentInfos, AddressOf Me.detach_tblEnrollmentInfos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intClientID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intClientID() As Long
		Get
			Return Me._intClientID
		End Get
		Set
			If ((Me._intClientID = value)  _
						= false) Then
				Me.OnintClientIDChanging(value)
				Me.SendPropertyChanging
				Me._intClientID = value
				Me.SendPropertyChanged("intClientID")
				Me.OnintClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strClientName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property strClientName() As String
		Get
			Return Me._strClientName
		End Get
		Set
			If (String.Equals(Me._strClientName, value) = false) Then
				Me.OnstrClientNameChanging(value)
				Me.SendPropertyChanging
				Me._strClientName = value
				Me.SendPropertyChanged("strClientName")
				Me.OnstrClientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intPerpetual", DbType:="Bit")>  _
	Public Property intPerpetual() As System.Nullable(Of Boolean)
		Get
			Return Me._intPerpetual
		End Get
		Set
			If (Me._intPerpetual.Equals(value) = false) Then
				Me.OnintPerpetualChanging(value)
				Me.SendPropertyChanging
				Me._intPerpetual = value
				Me.SendPropertyChanged("intPerpetual")
				Me.OnintPerpetualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmPerpEffDt", DbType:="Date")>  _
	Public Property dtmPerpEffDt() As System.Nullable(Of Date)
		Get
			Return Me._dtmPerpEffDt
		End Get
		Set
			If (Me._dtmPerpEffDt.Equals(value) = false) Then
				Me.OndtmPerpEffDtChanging(value)
				Me.SendPropertyChanging
				Me._dtmPerpEffDt = value
				Me.SendPropertyChanged("dtmPerpEffDt")
				Me.OndtmPerpEffDtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intAltEEID", DbType:="Bit")>  _
	Public Property intAltEEID() As System.Nullable(Of Boolean)
		Get
			Return Me._intAltEEID
		End Get
		Set
			If (Me._intAltEEID.Equals(value) = false) Then
				Me.OnintAltEEIDChanging(value)
				Me.SendPropertyChanging
				Me._intAltEEID = value
				Me.SendPropertyChanged("intAltEEID")
				Me.OnintAltEEIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmLastUpdated", DbType:="DateTime NOT NULL")>  _
	Public Property dtmLastUpdated() As Date
		Get
			Return Me._dtmLastUpdated
		End Get
		Set
			If ((Me._dtmLastUpdated = value)  _
						= false) Then
				Me.OndtmLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._dtmLastUpdated = value
				Me.SendPropertyChanged("dtmLastUpdated")
				Me.OndtmLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblClientInfo_tblEnrollmentInfo", Storage:="_tblEnrollmentInfos", ThisKey:="intClientID", OtherKey:="intClient")>  _
	Public Property tblEnrollmentInfos() As EntitySet(Of tblEnrollmentInfo)
		Get
			Return Me._tblEnrollmentInfos
		End Get
		Set
			Me._tblEnrollmentInfos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblEnrollmentInfos(ByVal entity As tblEnrollmentInfo)
		Me.SendPropertyChanging
		entity.tblClientInfo = Me
	End Sub
	
	Private Sub detach_tblEnrollmentInfos(ByVal entity As tblEnrollmentInfo)
		Me.SendPropertyChanging
		entity.tblClientInfo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCoverageType")>  _
Partial Public Class tblCoverageType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intCoverageTypeID As Integer
	
	Private _strName As String
	
	Private _tblBenefitsRates As EntitySet(Of tblBenefitsRate)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintCoverageTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintCoverageTypeIDChanged()
    End Sub
    Partial Private Sub OnstrNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBenefitsRates = New EntitySet(Of tblBenefitsRate)(AddressOf Me.attach_tblBenefitsRates, AddressOf Me.detach_tblBenefitsRates)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intCoverageTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intCoverageTypeID() As Integer
		Get
			Return Me._intCoverageTypeID
		End Get
		Set
			If ((Me._intCoverageTypeID = value)  _
						= false) Then
				Me.OnintCoverageTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._intCoverageTypeID = value
				Me.SendPropertyChanged("intCoverageTypeID")
				Me.OnintCoverageTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strName", DbType:="NVarChar(10)")>  _
	Public Property strName() As String
		Get
			Return Me._strName
		End Get
		Set
			If (String.Equals(Me._strName, value) = false) Then
				Me.OnstrNameChanging(value)
				Me.SendPropertyChanging
				Me._strName = value
				Me.SendPropertyChanged("strName")
				Me.OnstrNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCoverageType_tblBenefitsRate", Storage:="_tblBenefitsRates", ThisKey:="intCoverageTypeID", OtherKey:="intCoverageType")>  _
	Public Property tblBenefitsRates() As EntitySet(Of tblBenefitsRate)
		Get
			Return Me._tblBenefitsRates
		End Get
		Set
			Me._tblBenefitsRates.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBenefitsRates(ByVal entity As tblBenefitsRate)
		Me.SendPropertyChanging
		entity.tblCoverageType = Me
	End Sub
	
	Private Sub detach_tblBenefitsRates(ByVal entity As tblBenefitsRate)
		Me.SendPropertyChanging
		entity.tblCoverageType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDependentPB")>  _
Partial Public Class tblDependentPB
	
	Private _strEmployeeSSN As String
	
	Private _strDependentSSN As String
	
	Private _intEnrollment As Long
	
	Private _intBenefit As Long
	
	Private _strFName As String
	
	Private _strMName As String
	
	Private _strLName As String
	
	Private _strDOB As Date
	
	Private _intRelationship As Integer
	
	Private _intGender As Short
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmployeeSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strEmployeeSSN() As String
		Get
			Return Me._strEmployeeSSN
		End Get
		Set
			If (String.Equals(Me._strEmployeeSSN, value) = false) Then
				Me._strEmployeeSSN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDependentSSN", DbType:="NChar(9)")>  _
	Public Property strDependentSSN() As String
		Get
			Return Me._strDependentSSN
		End Get
		Set
			If (String.Equals(Me._strDependentSSN, value) = false) Then
				Me._strDependentSSN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intEnrollment", DbType:="BigInt NOT NULL")>  _
	Public Property intEnrollment() As Long
		Get
			Return Me._intEnrollment
		End Get
		Set
			If ((Me._intEnrollment = value)  _
						= false) Then
				Me._intEnrollment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefit", DbType:="BigInt NOT NULL")>  _
	Public Property intBenefit() As Long
		Get
			Return Me._intBenefit
		End Get
		Set
			If ((Me._intBenefit = value)  _
						= false) Then
				Me._intBenefit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strFName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property strFName() As String
		Get
			Return Me._strFName
		End Get
		Set
			If (String.Equals(Me._strFName, value) = false) Then
				Me._strFName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strMName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property strMName() As String
		Get
			Return Me._strMName
		End Get
		Set
			If (String.Equals(Me._strMName, value) = false) Then
				Me._strMName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strLName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property strLName() As String
		Get
			Return Me._strLName
		End Get
		Set
			If (String.Equals(Me._strLName, value) = false) Then
				Me._strLName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDOB", DbType:="Date NOT NULL")>  _
	Public Property strDOB() As Date
		Get
			Return Me._strDOB
		End Get
		Set
			If ((Me._strDOB = value)  _
						= false) Then
				Me._strDOB = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRelationship", DbType:="Int NOT NULL")>  _
	Public Property intRelationship() As Integer
		Get
			Return Me._intRelationship
		End Get
		Set
			If ((Me._intRelationship = value)  _
						= false) Then
				Me._intRelationship = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intGender", DbType:="SmallInt NOT NULL")>  _
	Public Property intGender() As Short
		Get
			Return Me._intGender
		End Get
		Set
			If ((Me._intGender = value)  _
						= false) Then
				Me._intGender = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDependents")>  _
Partial Public Class tblDependent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intDepID As Long
	
	Private _strEmployeeSSN As String
	
	Private _intGender As Short
	
	Private _strDependentSSN As String
	
	Private _strClientDepID As String
	
	Private _strFName As String
	
	Private _strMName As String
	
	Private _strLName As String
	
	Private _strDOB As Date
	
	Private _intRelationship As Integer
	
	Private _tblGender As EntityRef(Of tblGender)
	
	Private _tblRelationship As EntityRef(Of tblRelationship)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintDepIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintDepIDChanged()
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanged()
    End Sub
    Partial Private Sub OnintGenderChanging(value As Short)
    End Sub
    Partial Private Sub OnintGenderChanged()
    End Sub
    Partial Private Sub OnstrDependentSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrDependentSSNChanged()
    End Sub
    Partial Private Sub OnstrClientDepIDChanging(value As String)
    End Sub
    Partial Private Sub OnstrClientDepIDChanged()
    End Sub
    Partial Private Sub OnstrFNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrFNameChanged()
    End Sub
    Partial Private Sub OnstrMNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrMNameChanged()
    End Sub
    Partial Private Sub OnstrLNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrLNameChanged()
    End Sub
    Partial Private Sub OnstrDOBChanging(value As Date)
    End Sub
    Partial Private Sub OnstrDOBChanged()
    End Sub
    Partial Private Sub OnintRelationshipChanging(value As Integer)
    End Sub
    Partial Private Sub OnintRelationshipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblGender = CType(Nothing, EntityRef(Of tblGender))
		Me._tblRelationship = CType(Nothing, EntityRef(Of tblRelationship))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intDepID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intDepID() As Long
		Get
			Return Me._intDepID
		End Get
		Set
			If ((Me._intDepID = value)  _
						= false) Then
				Me.OnintDepIDChanging(value)
				Me.SendPropertyChanging
				Me._intDepID = value
				Me.SendPropertyChanged("intDepID")
				Me.OnintDepIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmployeeSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strEmployeeSSN() As String
		Get
			Return Me._strEmployeeSSN
		End Get
		Set
			If (String.Equals(Me._strEmployeeSSN, value) = false) Then
				Me.OnstrEmployeeSSNChanging(value)
				Me.SendPropertyChanging
				Me._strEmployeeSSN = value
				Me.SendPropertyChanged("strEmployeeSSN")
				Me.OnstrEmployeeSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intGender", DbType:="SmallInt NOT NULL")>  _
	Public Property intGender() As Short
		Get
			Return Me._intGender
		End Get
		Set
			If ((Me._intGender = value)  _
						= false) Then
				If Me._tblGender.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintGenderChanging(value)
				Me.SendPropertyChanging
				Me._intGender = value
				Me.SendPropertyChanged("intGender")
				Me.OnintGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDependentSSN", DbType:="NChar(9)")>  _
	Public Property strDependentSSN() As String
		Get
			Return Me._strDependentSSN
		End Get
		Set
			If (String.Equals(Me._strDependentSSN, value) = false) Then
				Me.OnstrDependentSSNChanging(value)
				Me.SendPropertyChanging
				Me._strDependentSSN = value
				Me.SendPropertyChanged("strDependentSSN")
				Me.OnstrDependentSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strClientDepID", DbType:="NVarChar(5)")>  _
	Public Property strClientDepID() As String
		Get
			Return Me._strClientDepID
		End Get
		Set
			If (String.Equals(Me._strClientDepID, value) = false) Then
				Me.OnstrClientDepIDChanging(value)
				Me.SendPropertyChanging
				Me._strClientDepID = value
				Me.SendPropertyChanged("strClientDepID")
				Me.OnstrClientDepIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strFName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property strFName() As String
		Get
			Return Me._strFName
		End Get
		Set
			If (String.Equals(Me._strFName, value) = false) Then
				Me.OnstrFNameChanging(value)
				Me.SendPropertyChanging
				Me._strFName = value
				Me.SendPropertyChanged("strFName")
				Me.OnstrFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strMName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property strMName() As String
		Get
			Return Me._strMName
		End Get
		Set
			If (String.Equals(Me._strMName, value) = false) Then
				Me.OnstrMNameChanging(value)
				Me.SendPropertyChanging
				Me._strMName = value
				Me.SendPropertyChanged("strMName")
				Me.OnstrMNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strLName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property strLName() As String
		Get
			Return Me._strLName
		End Get
		Set
			If (String.Equals(Me._strLName, value) = false) Then
				Me.OnstrLNameChanging(value)
				Me.SendPropertyChanging
				Me._strLName = value
				Me.SendPropertyChanged("strLName")
				Me.OnstrLNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDOB", DbType:="Date NOT NULL")>  _
	Public Property strDOB() As Date
		Get
			Return Me._strDOB
		End Get
		Set
			If ((Me._strDOB = value)  _
						= false) Then
				Me.OnstrDOBChanging(value)
				Me.SendPropertyChanging
				Me._strDOB = value
				Me.SendPropertyChanged("strDOB")
				Me.OnstrDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRelationship", DbType:="Int NOT NULL")>  _
	Public Property intRelationship() As Integer
		Get
			Return Me._intRelationship
		End Get
		Set
			If ((Me._intRelationship = value)  _
						= false) Then
				If Me._tblRelationship.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintRelationshipChanging(value)
				Me.SendPropertyChanging
				Me._intRelationship = value
				Me.SendPropertyChanged("intRelationship")
				Me.OnintRelationshipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGender_tblDependent", Storage:="_tblGender", ThisKey:="intGender", OtherKey:="intGenderID", IsForeignKey:=true)>  _
	Public Property tblGender() As tblGender
		Get
			Return Me._tblGender.Entity
		End Get
		Set
			Dim previousValue As tblGender = Me._tblGender.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblGender.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblGender.Entity = Nothing
					previousValue.tblDependents.Remove(Me)
				End If
				Me._tblGender.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblDependents.Add(Me)
					Me._intGender = value.intGenderID
				Else
					Me._intGender = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("tblGender")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblRelationship_tblDependent", Storage:="_tblRelationship", ThisKey:="intRelationship", OtherKey:="intRelID", IsForeignKey:=true)>  _
	Public Property tblRelationship() As tblRelationship
		Get
			Return Me._tblRelationship.Entity
		End Get
		Set
			Dim previousValue As tblRelationship = Me._tblRelationship.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblRelationship.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblRelationship.Entity = Nothing
					previousValue.tblDependents.Remove(Me)
				End If
				Me._tblRelationship.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblDependents.Add(Me)
					Me._intRelationship = value.intRelID
				Else
					Me._intRelationship = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblRelationship")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblElections")>  _
Partial Public Class tblElection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intElectionID As Long
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintElectionIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintElectionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intElectionID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intElectionID() As Long
		Get
			Return Me._intElectionID
		End Get
		Set
			If ((Me._intElectionID = value)  _
						= false) Then
				Me.OnintElectionIDChanging(value)
				Me.SendPropertyChanging
				Me._intElectionID = value
				Me.SendPropertyChanged("intElectionID")
				Me.OnintElectionIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEmployees")>  _
Partial Public Class tblEmployee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intID As Long
	
	Private _strEmployeeSSN As String
	
	Private _intEnrollment As Long
	
	Private _strFName As String
	
	Private _strLName As String
	
	Private _strMName As String
	
	Private _intGender As Short
	
	Private _dtmDOB As Date
	
	Private _strStreet1 As String
	
	Private _strStreet2 As String
	
	Private _strCity As String
	
	Private _strState As String
	
	Private _strZip As String
	
	Private _strHomePhone As String
	
	Private _strCellPhone As String
	
	Private _bitSmoker As System.Nullable(Of Boolean)
	
	Private _strAltEEID As String
	
	Private _dtmHiredDate As Date
	
	Private _strTitle As String
	
	Private _strEEID As String
	
	Private _strLocation As String
	
	Private _strDepartment As String
	
	Private _strEEClass As String
	
	Private _strWorkPhone As String
	
	Private _strPayType As Char
	
	Private _strStatus As String
	
	Private _intHours As Byte
	
	Private _strSalary As Decimal
	
	Private _intWorkWeeks As Byte
	
	Private _intPayFrequency As Byte
	
	Private _intDeductionFrequency As Byte
	
	Private _strUnionCode As String
	
	Private _strEmploymentStatus As String
	
	Private _tblEnrollments As EntitySet(Of tblEnrollment)
	
	Private _tblEnrollmentInfo As EntityRef(Of tblEnrollmentInfo)
	
	Private _tblGender As EntityRef(Of tblGender)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintIDChanged()
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanged()
    End Sub
    Partial Private Sub OnintEnrollmentChanging(value As Long)
    End Sub
    Partial Private Sub OnintEnrollmentChanged()
    End Sub
    Partial Private Sub OnstrFNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrFNameChanged()
    End Sub
    Partial Private Sub OnstrLNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrLNameChanged()
    End Sub
    Partial Private Sub OnstrMNameChanging(value As String)
    End Sub
    Partial Private Sub OnstrMNameChanged()
    End Sub
    Partial Private Sub OnintGenderChanging(value As Short)
    End Sub
    Partial Private Sub OnintGenderChanged()
    End Sub
    Partial Private Sub OndtmDOBChanging(value As Date)
    End Sub
    Partial Private Sub OndtmDOBChanged()
    End Sub
    Partial Private Sub OnstrStreet1Changing(value As String)
    End Sub
    Partial Private Sub OnstrStreet1Changed()
    End Sub
    Partial Private Sub OnstrStreet2Changing(value As String)
    End Sub
    Partial Private Sub OnstrStreet2Changed()
    End Sub
    Partial Private Sub OnstrCityChanging(value As String)
    End Sub
    Partial Private Sub OnstrCityChanged()
    End Sub
    Partial Private Sub OnstrStateChanging(value As String)
    End Sub
    Partial Private Sub OnstrStateChanged()
    End Sub
    Partial Private Sub OnstrZipChanging(value As String)
    End Sub
    Partial Private Sub OnstrZipChanged()
    End Sub
    Partial Private Sub OnstrHomePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnstrHomePhoneChanged()
    End Sub
    Partial Private Sub OnstrCellPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnstrCellPhoneChanged()
    End Sub
    Partial Private Sub OnbitSmokerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnbitSmokerChanged()
    End Sub
    Partial Private Sub OnstrAltEEIDChanging(value As String)
    End Sub
    Partial Private Sub OnstrAltEEIDChanged()
    End Sub
    Partial Private Sub OndtmHiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OndtmHiredDateChanged()
    End Sub
    Partial Private Sub OnstrTitleChanging(value As String)
    End Sub
    Partial Private Sub OnstrTitleChanged()
    End Sub
    Partial Private Sub OnstrEEIDChanging(value As String)
    End Sub
    Partial Private Sub OnstrEEIDChanged()
    End Sub
    Partial Private Sub OnstrLocationChanging(value As String)
    End Sub
    Partial Private Sub OnstrLocationChanged()
    End Sub
    Partial Private Sub OnstrDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnstrDepartmentChanged()
    End Sub
    Partial Private Sub OnstrEEClassChanging(value As String)
    End Sub
    Partial Private Sub OnstrEEClassChanged()
    End Sub
    Partial Private Sub OnstrWorkPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnstrWorkPhoneChanged()
    End Sub
    Partial Private Sub OnstrPayTypeChanging(value As Char)
    End Sub
    Partial Private Sub OnstrPayTypeChanged()
    End Sub
    Partial Private Sub OnstrStatusChanging(value As String)
    End Sub
    Partial Private Sub OnstrStatusChanged()
    End Sub
    Partial Private Sub OnintHoursChanging(value As Byte)
    End Sub
    Partial Private Sub OnintHoursChanged()
    End Sub
    Partial Private Sub OnstrSalaryChanging(value As Decimal)
    End Sub
    Partial Private Sub OnstrSalaryChanged()
    End Sub
    Partial Private Sub OnintWorkWeeksChanging(value As Byte)
    End Sub
    Partial Private Sub OnintWorkWeeksChanged()
    End Sub
    Partial Private Sub OnintPayFrequencyChanging(value As Byte)
    End Sub
    Partial Private Sub OnintPayFrequencyChanged()
    End Sub
    Partial Private Sub OnintDeductionFrequencyChanging(value As Byte)
    End Sub
    Partial Private Sub OnintDeductionFrequencyChanged()
    End Sub
    Partial Private Sub OnstrUnionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnstrUnionCodeChanged()
    End Sub
    Partial Private Sub OnstrEmploymentStatusChanging(value As String)
    End Sub
    Partial Private Sub OnstrEmploymentStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblEnrollments = New EntitySet(Of tblEnrollment)(AddressOf Me.attach_tblEnrollments, AddressOf Me.detach_tblEnrollments)
		Me._tblEnrollmentInfo = CType(Nothing, EntityRef(Of tblEnrollmentInfo))
		Me._tblGender = CType(Nothing, EntityRef(Of tblGender))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intID", AutoSync:=AutoSync.Always, DbType:="BigInt NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property intID() As Long
		Get
			Return Me._intID
		End Get
		Set
			If ((Me._intID = value)  _
						= false) Then
				Me.OnintIDChanging(value)
				Me.SendPropertyChanging
				Me._intID = value
				Me.SendPropertyChanged("intID")
				Me.OnintIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmployeeSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property strEmployeeSSN() As String
		Get
			Return Me._strEmployeeSSN
		End Get
		Set
			If (String.Equals(Me._strEmployeeSSN, value) = false) Then
				Me.OnstrEmployeeSSNChanging(value)
				Me.SendPropertyChanging
				Me._strEmployeeSSN = value
				Me.SendPropertyChanged("strEmployeeSSN")
				Me.OnstrEmployeeSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intEnrollment", DbType:="BigInt NOT NULL")>  _
	Public Property intEnrollment() As Long
		Get
			Return Me._intEnrollment
		End Get
		Set
			If ((Me._intEnrollment = value)  _
						= false) Then
				If Me._tblEnrollmentInfo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintEnrollmentChanging(value)
				Me.SendPropertyChanging
				Me._intEnrollment = value
				Me.SendPropertyChanged("intEnrollment")
				Me.OnintEnrollmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strFName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property strFName() As String
		Get
			Return Me._strFName
		End Get
		Set
			If (String.Equals(Me._strFName, value) = false) Then
				Me.OnstrFNameChanging(value)
				Me.SendPropertyChanging
				Me._strFName = value
				Me.SendPropertyChanged("strFName")
				Me.OnstrFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strLName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property strLName() As String
		Get
			Return Me._strLName
		End Get
		Set
			If (String.Equals(Me._strLName, value) = false) Then
				Me.OnstrLNameChanging(value)
				Me.SendPropertyChanging
				Me._strLName = value
				Me.SendPropertyChanged("strLName")
				Me.OnstrLNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strMName", DbType:="NVarChar(15)")>  _
	Public Property strMName() As String
		Get
			Return Me._strMName
		End Get
		Set
			If (String.Equals(Me._strMName, value) = false) Then
				Me.OnstrMNameChanging(value)
				Me.SendPropertyChanging
				Me._strMName = value
				Me.SendPropertyChanged("strMName")
				Me.OnstrMNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intGender", DbType:="SmallInt NOT NULL")>  _
	Public Property intGender() As Short
		Get
			Return Me._intGender
		End Get
		Set
			If ((Me._intGender = value)  _
						= false) Then
				If Me._tblGender.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintGenderChanging(value)
				Me.SendPropertyChanging
				Me._intGender = value
				Me.SendPropertyChanged("intGender")
				Me.OnintGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmDOB", DbType:="Date NOT NULL")>  _
	Public Property dtmDOB() As Date
		Get
			Return Me._dtmDOB
		End Get
		Set
			If ((Me._dtmDOB = value)  _
						= false) Then
				Me.OndtmDOBChanging(value)
				Me.SendPropertyChanging
				Me._dtmDOB = value
				Me.SendPropertyChanged("dtmDOB")
				Me.OndtmDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strStreet1", DbType:="NVarChar(50)")>  _
	Public Property strStreet1() As String
		Get
			Return Me._strStreet1
		End Get
		Set
			If (String.Equals(Me._strStreet1, value) = false) Then
				Me.OnstrStreet1Changing(value)
				Me.SendPropertyChanging
				Me._strStreet1 = value
				Me.SendPropertyChanged("strStreet1")
				Me.OnstrStreet1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strStreet2", DbType:="NVarChar(15)")>  _
	Public Property strStreet2() As String
		Get
			Return Me._strStreet2
		End Get
		Set
			If (String.Equals(Me._strStreet2, value) = false) Then
				Me.OnstrStreet2Changing(value)
				Me.SendPropertyChanging
				Me._strStreet2 = value
				Me.SendPropertyChanged("strStreet2")
				Me.OnstrStreet2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCity", DbType:="NVarChar(15)")>  _
	Public Property strCity() As String
		Get
			Return Me._strCity
		End Get
		Set
			If (String.Equals(Me._strCity, value) = false) Then
				Me.OnstrCityChanging(value)
				Me.SendPropertyChanging
				Me._strCity = value
				Me.SendPropertyChanged("strCity")
				Me.OnstrCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strState", DbType:="NChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property strState() As String
		Get
			Return Me._strState
		End Get
		Set
			If (String.Equals(Me._strState, value) = false) Then
				Me.OnstrStateChanging(value)
				Me.SendPropertyChanging
				Me._strState = value
				Me.SendPropertyChanged("strState")
				Me.OnstrStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strZip", DbType:="NChar(5)")>  _
	Public Property strZip() As String
		Get
			Return Me._strZip
		End Get
		Set
			If (String.Equals(Me._strZip, value) = false) Then
				Me.OnstrZipChanging(value)
				Me.SendPropertyChanging
				Me._strZip = value
				Me.SendPropertyChanged("strZip")
				Me.OnstrZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strHomePhone", DbType:="NChar(10)")>  _
	Public Property strHomePhone() As String
		Get
			Return Me._strHomePhone
		End Get
		Set
			If (String.Equals(Me._strHomePhone, value) = false) Then
				Me.OnstrHomePhoneChanging(value)
				Me.SendPropertyChanging
				Me._strHomePhone = value
				Me.SendPropertyChanged("strHomePhone")
				Me.OnstrHomePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCellPhone", DbType:="NChar(10)")>  _
	Public Property strCellPhone() As String
		Get
			Return Me._strCellPhone
		End Get
		Set
			If (String.Equals(Me._strCellPhone, value) = false) Then
				Me.OnstrCellPhoneChanging(value)
				Me.SendPropertyChanging
				Me._strCellPhone = value
				Me.SendPropertyChanged("strCellPhone")
				Me.OnstrCellPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bitSmoker", DbType:="Bit")>  _
	Public Property bitSmoker() As System.Nullable(Of Boolean)
		Get
			Return Me._bitSmoker
		End Get
		Set
			If (Me._bitSmoker.Equals(value) = false) Then
				Me.OnbitSmokerChanging(value)
				Me.SendPropertyChanging
				Me._bitSmoker = value
				Me.SendPropertyChanged("bitSmoker")
				Me.OnbitSmokerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAltEEID", DbType:="NChar(9)")>  _
	Public Property strAltEEID() As String
		Get
			Return Me._strAltEEID
		End Get
		Set
			If (String.Equals(Me._strAltEEID, value) = false) Then
				Me.OnstrAltEEIDChanging(value)
				Me.SendPropertyChanging
				Me._strAltEEID = value
				Me.SendPropertyChanged("strAltEEID")
				Me.OnstrAltEEIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmHiredDate", DbType:="Date NOT NULL")>  _
	Public Property dtmHiredDate() As Date
		Get
			Return Me._dtmHiredDate
		End Get
		Set
			If ((Me._dtmHiredDate = value)  _
						= false) Then
				Me.OndtmHiredDateChanging(value)
				Me.SendPropertyChanging
				Me._dtmHiredDate = value
				Me.SendPropertyChanged("dtmHiredDate")
				Me.OndtmHiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strTitle", DbType:="NChar(25)")>  _
	Public Property strTitle() As String
		Get
			Return Me._strTitle
		End Get
		Set
			If (String.Equals(Me._strTitle, value) = false) Then
				Me.OnstrTitleChanging(value)
				Me.SendPropertyChanging
				Me._strTitle = value
				Me.SendPropertyChanged("strTitle")
				Me.OnstrTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEEID", DbType:="NVarChar(14)")>  _
	Public Property strEEID() As String
		Get
			Return Me._strEEID
		End Get
		Set
			If (String.Equals(Me._strEEID, value) = false) Then
				Me.OnstrEEIDChanging(value)
				Me.SendPropertyChanging
				Me._strEEID = value
				Me.SendPropertyChanged("strEEID")
				Me.OnstrEEIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strLocation", DbType:="NVarChar(50)")>  _
	Public Property strLocation() As String
		Get
			Return Me._strLocation
		End Get
		Set
			If (String.Equals(Me._strLocation, value) = false) Then
				Me.OnstrLocationChanging(value)
				Me.SendPropertyChanging
				Me._strLocation = value
				Me.SendPropertyChanged("strLocation")
				Me.OnstrLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDepartment", DbType:="NVarChar(50)")>  _
	Public Property strDepartment() As String
		Get
			Return Me._strDepartment
		End Get
		Set
			If (String.Equals(Me._strDepartment, value) = false) Then
				Me.OnstrDepartmentChanging(value)
				Me.SendPropertyChanging
				Me._strDepartment = value
				Me.SendPropertyChanged("strDepartment")
				Me.OnstrDepartmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEEClass", DbType:="NVarChar(50)")>  _
	Public Property strEEClass() As String
		Get
			Return Me._strEEClass
		End Get
		Set
			If (String.Equals(Me._strEEClass, value) = false) Then
				Me.OnstrEEClassChanging(value)
				Me.SendPropertyChanging
				Me._strEEClass = value
				Me.SendPropertyChanged("strEEClass")
				Me.OnstrEEClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strWorkPhone", DbType:="NChar(10)")>  _
	Public Property strWorkPhone() As String
		Get
			Return Me._strWorkPhone
		End Get
		Set
			If (String.Equals(Me._strWorkPhone, value) = false) Then
				Me.OnstrWorkPhoneChanging(value)
				Me.SendPropertyChanging
				Me._strWorkPhone = value
				Me.SendPropertyChanged("strWorkPhone")
				Me.OnstrWorkPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strPayType", DbType:="NChar(1) NOT NULL")>  _
	Public Property strPayType() As Char
		Get
			Return Me._strPayType
		End Get
		Set
			If ((Me._strPayType = value)  _
						= false) Then
				Me.OnstrPayTypeChanging(value)
				Me.SendPropertyChanging
				Me._strPayType = value
				Me.SendPropertyChanged("strPayType")
				Me.OnstrPayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strStatus", DbType:="NChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property strStatus() As String
		Get
			Return Me._strStatus
		End Get
		Set
			If (String.Equals(Me._strStatus, value) = false) Then
				Me.OnstrStatusChanging(value)
				Me.SendPropertyChanging
				Me._strStatus = value
				Me.SendPropertyChanged("strStatus")
				Me.OnstrStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intHours", DbType:="TinyInt NOT NULL")>  _
	Public Property intHours() As Byte
		Get
			Return Me._intHours
		End Get
		Set
			If ((Me._intHours = value)  _
						= false) Then
				Me.OnintHoursChanging(value)
				Me.SendPropertyChanging
				Me._intHours = value
				Me.SendPropertyChanged("intHours")
				Me.OnintHoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strSalary", DbType:="Money NOT NULL")>  _
	Public Property strSalary() As Decimal
		Get
			Return Me._strSalary
		End Get
		Set
			If ((Me._strSalary = value)  _
						= false) Then
				Me.OnstrSalaryChanging(value)
				Me.SendPropertyChanging
				Me._strSalary = value
				Me.SendPropertyChanged("strSalary")
				Me.OnstrSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intWorkWeeks", DbType:="TinyInt NOT NULL")>  _
	Public Property intWorkWeeks() As Byte
		Get
			Return Me._intWorkWeeks
		End Get
		Set
			If ((Me._intWorkWeeks = value)  _
						= false) Then
				Me.OnintWorkWeeksChanging(value)
				Me.SendPropertyChanging
				Me._intWorkWeeks = value
				Me.SendPropertyChanged("intWorkWeeks")
				Me.OnintWorkWeeksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intPayFrequency", DbType:="TinyInt NOT NULL")>  _
	Public Property intPayFrequency() As Byte
		Get
			Return Me._intPayFrequency
		End Get
		Set
			If ((Me._intPayFrequency = value)  _
						= false) Then
				Me.OnintPayFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._intPayFrequency = value
				Me.SendPropertyChanged("intPayFrequency")
				Me.OnintPayFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intDeductionFrequency", DbType:="TinyInt NOT NULL")>  _
	Public Property intDeductionFrequency() As Byte
		Get
			Return Me._intDeductionFrequency
		End Get
		Set
			If ((Me._intDeductionFrequency = value)  _
						= false) Then
				Me.OnintDeductionFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._intDeductionFrequency = value
				Me.SendPropertyChanged("intDeductionFrequency")
				Me.OnintDeductionFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strUnionCode", DbType:="NVarChar(15)")>  _
	Public Property strUnionCode() As String
		Get
			Return Me._strUnionCode
		End Get
		Set
			If (String.Equals(Me._strUnionCode, value) = false) Then
				Me.OnstrUnionCodeChanging(value)
				Me.SendPropertyChanging
				Me._strUnionCode = value
				Me.SendPropertyChanged("strUnionCode")
				Me.OnstrUnionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmploymentStatus", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property strEmploymentStatus() As String
		Get
			Return Me._strEmploymentStatus
		End Get
		Set
			If (String.Equals(Me._strEmploymentStatus, value) = false) Then
				Me.OnstrEmploymentStatusChanging(value)
				Me.SendPropertyChanging
				Me._strEmploymentStatus = value
				Me.SendPropertyChanged("strEmploymentStatus")
				Me.OnstrEmploymentStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblEmployee_tblEnrollment", Storage:="_tblEnrollments", ThisKey:="strEmployeeSSN", OtherKey:="strEmployeeSSN")>  _
	Public Property tblEnrollments() As EntitySet(Of tblEnrollment)
		Get
			Return Me._tblEnrollments
		End Get
		Set
			Me._tblEnrollments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblEnrollmentInfo_tblEmployee", Storage:="_tblEnrollmentInfo", ThisKey:="intEnrollment", OtherKey:="intEnrollmentID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tblEnrollmentInfo() As tblEnrollmentInfo
		Get
			Return Me._tblEnrollmentInfo.Entity
		End Get
		Set
			Dim previousValue As tblEnrollmentInfo = Me._tblEnrollmentInfo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblEnrollmentInfo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblEnrollmentInfo.Entity = Nothing
					previousValue.tblEmployees.Remove(Me)
				End If
				Me._tblEnrollmentInfo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEmployees.Add(Me)
					Me._intEnrollment = value.intEnrollmentID
				Else
					Me._intEnrollment = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("tblEnrollmentInfo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGender_tblEmployee", Storage:="_tblGender", ThisKey:="intGender", OtherKey:="intGenderID", IsForeignKey:=true)>  _
	Public Property tblGender() As tblGender
		Get
			Return Me._tblGender.Entity
		End Get
		Set
			Dim previousValue As tblGender = Me._tblGender.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblGender.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblGender.Entity = Nothing
					previousValue.tblEmployees.Remove(Me)
				End If
				Me._tblGender.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEmployees.Add(Me)
					Me._intGender = value.intGenderID
				Else
					Me._intGender = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("tblGender")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblEmployee = Me
	End Sub
	
	Private Sub detach_tblEnrollments(ByVal entity As tblEnrollment)
		Me.SendPropertyChanging
		entity.tblEmployee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEnrollmentInfo")>  _
Partial Public Class tblEnrollmentInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intEnrollmentID As Long
	
	Private _intClient As Long
	
	Private _dtmStart As Date
	
	Private _dtmEnd As Date
	
	Private _tblEmployees As EntitySet(Of tblEmployee)
	
	Private _tblClientInfo As EntityRef(Of tblClientInfo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintEnrollmentIDChanging(value As Long)
    End Sub
    Partial Private Sub OnintEnrollmentIDChanged()
    End Sub
    Partial Private Sub OnintClientChanging(value As Long)
    End Sub
    Partial Private Sub OnintClientChanged()
    End Sub
    Partial Private Sub OndtmStartChanging(value As Date)
    End Sub
    Partial Private Sub OndtmStartChanged()
    End Sub
    Partial Private Sub OndtmEndChanging(value As Date)
    End Sub
    Partial Private Sub OndtmEndChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblEmployees = New EntitySet(Of tblEmployee)(AddressOf Me.attach_tblEmployees, AddressOf Me.detach_tblEmployees)
		Me._tblClientInfo = CType(Nothing, EntityRef(Of tblClientInfo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intEnrollmentID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intEnrollmentID() As Long
		Get
			Return Me._intEnrollmentID
		End Get
		Set
			If ((Me._intEnrollmentID = value)  _
						= false) Then
				Me.OnintEnrollmentIDChanging(value)
				Me.SendPropertyChanging
				Me._intEnrollmentID = value
				Me.SendPropertyChanged("intEnrollmentID")
				Me.OnintEnrollmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intClient", DbType:="BigInt NOT NULL")>  _
	Public Property intClient() As Long
		Get
			Return Me._intClient
		End Get
		Set
			If ((Me._intClient = value)  _
						= false) Then
				If Me._tblClientInfo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintClientChanging(value)
				Me.SendPropertyChanging
				Me._intClient = value
				Me.SendPropertyChanged("intClient")
				Me.OnintClientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmStart", DbType:="Date NOT NULL")>  _
	Public Property dtmStart() As Date
		Get
			Return Me._dtmStart
		End Get
		Set
			If ((Me._dtmStart = value)  _
						= false) Then
				Me.OndtmStartChanging(value)
				Me.SendPropertyChanging
				Me._dtmStart = value
				Me.SendPropertyChanged("dtmStart")
				Me.OndtmStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmEnd", DbType:="Date NOT NULL")>  _
	Public Property dtmEnd() As Date
		Get
			Return Me._dtmEnd
		End Get
		Set
			If ((Me._dtmEnd = value)  _
						= false) Then
				Me.OndtmEndChanging(value)
				Me.SendPropertyChanging
				Me._dtmEnd = value
				Me.SendPropertyChanged("dtmEnd")
				Me.OndtmEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblEnrollmentInfo_tblEmployee", Storage:="_tblEmployees", ThisKey:="intEnrollmentID", OtherKey:="intEnrollment")>  _
	Public Property tblEmployees() As EntitySet(Of tblEmployee)
		Get
			Return Me._tblEmployees
		End Get
		Set
			Me._tblEmployees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblClientInfo_tblEnrollmentInfo", Storage:="_tblClientInfo", ThisKey:="intClient", OtherKey:="intClientID", IsForeignKey:=true)>  _
	Public Property tblClientInfo() As tblClientInfo
		Get
			Return Me._tblClientInfo.Entity
		End Get
		Set
			Dim previousValue As tblClientInfo = Me._tblClientInfo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblClientInfo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblClientInfo.Entity = Nothing
					previousValue.tblEnrollmentInfos.Remove(Me)
				End If
				Me._tblClientInfo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEnrollmentInfos.Add(Me)
					Me._intClient = value.intClientID
				Else
					Me._intClient = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("tblClientInfo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblEmployees(ByVal entity As tblEmployee)
		Me.SendPropertyChanging
		entity.tblEnrollmentInfo = Me
	End Sub
	
	Private Sub detach_tblEmployees(ByVal entity As tblEmployee)
		Me.SendPropertyChanging
		entity.tblEnrollmentInfo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEnrollments")>  _
Partial Public Class tblEnrollment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _strEmployeeSSN As String
	
	Private _intBenefit As Long
	
	Private _strAgentSSN As String
	
	Private _dtmEnrollDate As Date
	
	Private _strCity As String
	
	Private _intState As Integer
	
	Private _intTrackingId As Long
	
	Private _tblAgentInfo As EntityRef(Of tblAgentInfo)
	
	Private _tblBenefit As EntityRef(Of tblBenefit)
	
	Private _tblEmployee As EntityRef(Of tblEmployee)
	
	Private _tblState As EntityRef(Of tblState)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrEmployeeSSNChanged()
    End Sub
    Partial Private Sub OnintBenefitChanging(value As Long)
    End Sub
    Partial Private Sub OnintBenefitChanged()
    End Sub
    Partial Private Sub OnstrAgentSSNChanging(value As String)
    End Sub
    Partial Private Sub OnstrAgentSSNChanged()
    End Sub
    Partial Private Sub OndtmEnrollDateChanging(value As Date)
    End Sub
    Partial Private Sub OndtmEnrollDateChanged()
    End Sub
    Partial Private Sub OnstrCityChanging(value As String)
    End Sub
    Partial Private Sub OnstrCityChanged()
    End Sub
    Partial Private Sub OnintStateChanging(value As Integer)
    End Sub
    Partial Private Sub OnintStateChanged()
    End Sub
    Partial Private Sub OnintTrackingIdChanging(value As Long)
    End Sub
    Partial Private Sub OnintTrackingIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblAgentInfo = CType(Nothing, EntityRef(Of tblAgentInfo))
		Me._tblBenefit = CType(Nothing, EntityRef(Of tblBenefit))
		Me._tblEmployee = CType(Nothing, EntityRef(Of tblEmployee))
		Me._tblState = CType(Nothing, EntityRef(Of tblState))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEmployeeSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strEmployeeSSN() As String
		Get
			Return Me._strEmployeeSSN
		End Get
		Set
			If (String.Equals(Me._strEmployeeSSN, value) = false) Then
				If Me._tblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstrEmployeeSSNChanging(value)
				Me.SendPropertyChanging
				Me._strEmployeeSSN = value
				Me.SendPropertyChanged("strEmployeeSSN")
				Me.OnstrEmployeeSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intBenefit", DbType:="BigInt NOT NULL")>  _
	Public Property intBenefit() As Long
		Get
			Return Me._intBenefit
		End Get
		Set
			If ((Me._intBenefit = value)  _
						= false) Then
				If Me._tblBenefit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintBenefitChanging(value)
				Me.SendPropertyChanging
				Me._intBenefit = value
				Me.SendPropertyChanged("intBenefit")
				Me.OnintBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAgentSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strAgentSSN() As String
		Get
			Return Me._strAgentSSN
		End Get
		Set
			If (String.Equals(Me._strAgentSSN, value) = false) Then
				If Me._tblAgentInfo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnstrAgentSSNChanging(value)
				Me.SendPropertyChanging
				Me._strAgentSSN = value
				Me.SendPropertyChanged("strAgentSSN")
				Me.OnstrAgentSSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmEnrollDate", DbType:="DateTime NOT NULL")>  _
	Public Property dtmEnrollDate() As Date
		Get
			Return Me._dtmEnrollDate
		End Get
		Set
			If ((Me._dtmEnrollDate = value)  _
						= false) Then
				Me.OndtmEnrollDateChanging(value)
				Me.SendPropertyChanging
				Me._dtmEnrollDate = value
				Me.SendPropertyChanged("dtmEnrollDate")
				Me.OndtmEnrollDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCity", DbType:="NVarChar(15)")>  _
	Public Property strCity() As String
		Get
			Return Me._strCity
		End Get
		Set
			If (String.Equals(Me._strCity, value) = false) Then
				Me.OnstrCityChanging(value)
				Me.SendPropertyChanging
				Me._strCity = value
				Me.SendPropertyChanged("strCity")
				Me.OnstrCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intState", DbType:="Int NOT NULL")>  _
	Public Property intState() As Integer
		Get
			Return Me._intState
		End Get
		Set
			If ((Me._intState = value)  _
						= false) Then
				If Me._tblState.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnintStateChanging(value)
				Me.SendPropertyChanging
				Me._intState = value
				Me.SendPropertyChanged("intState")
				Me.OnintStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intTrackingId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intTrackingId() As Long
		Get
			Return Me._intTrackingId
		End Get
		Set
			If ((Me._intTrackingId = value)  _
						= false) Then
				Me.OnintTrackingIdChanging(value)
				Me.SendPropertyChanging
				Me._intTrackingId = value
				Me.SendPropertyChanged("intTrackingId")
				Me.OnintTrackingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblAgentInfo_tblEnrollment", Storage:="_tblAgentInfo", ThisKey:="strAgentSSN", OtherKey:="strAgentSSN", IsForeignKey:=true)>  _
	Public Property tblAgentInfo() As tblAgentInfo
		Get
			Return Me._tblAgentInfo.Entity
		End Get
		Set
			Dim previousValue As tblAgentInfo = Me._tblAgentInfo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblAgentInfo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblAgentInfo.Entity = Nothing
					previousValue.tblEnrollments.Remove(Me)
				End If
				Me._tblAgentInfo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEnrollments.Add(Me)
					Me._strAgentSSN = value.strAgentSSN
				Else
					Me._strAgentSSN = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblAgentInfo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBenefit_tblEnrollment", Storage:="_tblBenefit", ThisKey:="intBenefit", OtherKey:="intBenefitID", IsForeignKey:=true)>  _
	Public Property tblBenefit() As tblBenefit
		Get
			Return Me._tblBenefit.Entity
		End Get
		Set
			Dim previousValue As tblBenefit = Me._tblBenefit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBenefit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBenefit.Entity = Nothing
					previousValue.tblEnrollments.Remove(Me)
				End If
				Me._tblBenefit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEnrollments.Add(Me)
					Me._intBenefit = value.intBenefitID
				Else
					Me._intBenefit = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("tblBenefit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblEmployee_tblEnrollment", Storage:="_tblEmployee", ThisKey:="strEmployeeSSN", OtherKey:="strEmployeeSSN", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tblEmployee() As tblEmployee
		Get
			Return Me._tblEmployee.Entity
		End Get
		Set
			Dim previousValue As tblEmployee = Me._tblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblEmployee.Entity = Nothing
					previousValue.tblEnrollments.Remove(Me)
				End If
				Me._tblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEnrollments.Add(Me)
					Me._strEmployeeSSN = value.strEmployeeSSN
				Else
					Me._strEmployeeSSN = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblState_tblEnrollment", Storage:="_tblState", ThisKey:="intState", OtherKey:="intStateID", IsForeignKey:=true)>  _
	Public Property tblState() As tblState
		Get
			Return Me._tblState.Entity
		End Get
		Set
			Dim previousValue As tblState = Me._tblState.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblState.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblState.Entity = Nothing
					previousValue.tblEnrollments.Remove(Me)
				End If
				Me._tblState.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblEnrollments.Add(Me)
					Me._intState = value.intStateID
				Else
					Me._intState = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblState")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGender")>  _
Partial Public Class tblGender
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intGenderID As Short
	
	Private _strGenderName As Char
	
	Private _tblDependents As EntitySet(Of tblDependent)
	
	Private _tblEmployees As EntitySet(Of tblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintGenderIDChanging(value As Short)
    End Sub
    Partial Private Sub OnintGenderIDChanged()
    End Sub
    Partial Private Sub OnstrGenderNameChanging(value As Char)
    End Sub
    Partial Private Sub OnstrGenderNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblDependents = New EntitySet(Of tblDependent)(AddressOf Me.attach_tblDependents, AddressOf Me.detach_tblDependents)
		Me._tblEmployees = New EntitySet(Of tblEmployee)(AddressOf Me.attach_tblEmployees, AddressOf Me.detach_tblEmployees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intGenderID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property intGenderID() As Short
		Get
			Return Me._intGenderID
		End Get
		Set
			If ((Me._intGenderID = value)  _
						= false) Then
				Me.OnintGenderIDChanging(value)
				Me.SendPropertyChanging
				Me._intGenderID = value
				Me.SendPropertyChanged("intGenderID")
				Me.OnintGenderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strGenderName", DbType:="NChar(1) NOT NULL")>  _
	Public Property strGenderName() As Char
		Get
			Return Me._strGenderName
		End Get
		Set
			If ((Me._strGenderName = value)  _
						= false) Then
				Me.OnstrGenderNameChanging(value)
				Me.SendPropertyChanging
				Me._strGenderName = value
				Me.SendPropertyChanged("strGenderName")
				Me.OnstrGenderNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGender_tblDependent", Storage:="_tblDependents", ThisKey:="intGenderID", OtherKey:="intGender")>  _
	Public Property tblDependents() As EntitySet(Of tblDependent)
		Get
			Return Me._tblDependents
		End Get
		Set
			Me._tblDependents.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGender_tblEmployee", Storage:="_tblEmployees", ThisKey:="intGenderID", OtherKey:="intGender")>  _
	Public Property tblEmployees() As EntitySet(Of tblEmployee)
		Get
			Return Me._tblEmployees
		End Get
		Set
			Me._tblEmployees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblDependents(ByVal entity As tblDependent)
		Me.SendPropertyChanging
		entity.tblGender = Me
	End Sub
	
	Private Sub detach_tblDependents(ByVal entity As tblDependent)
		Me.SendPropertyChanging
		entity.tblGender = Nothing
	End Sub
	
	Private Sub attach_tblEmployees(ByVal entity As tblEmployee)
		Me.SendPropertyChanging
		entity.tblGender = Me
	End Sub
	
	Private Sub detach_tblEmployees(ByVal entity As tblEmployee)
		Me.SendPropertyChanging
		entity.tblGender = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLicenseStates")>  _
Partial Public Class tblLicenseState
	
	Private _strAgentSSN As String
	
	Private _intState As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strAgentSSN", DbType:="NChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property strAgentSSN() As String
		Get
			Return Me._strAgentSSN
		End Get
		Set
			If (String.Equals(Me._strAgentSSN, value) = false) Then
				Me._strAgentSSN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intState", DbType:="Int NOT NULL")>  _
	Public Property intState() As Integer
		Get
			Return Me._intState
		End Get
		Set
			If ((Me._intState = value)  _
						= false) Then
				Me._intState = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRelationships")>  _
Partial Public Class tblRelationship
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _intRelID As Integer
	
	Private _strRelType As String
	
	Private _tblDependents As EntitySet(Of tblDependent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintRelIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintRelIDChanged()
    End Sub
    Partial Private Sub OnstrRelTypeChanging(value As String)
    End Sub
    Partial Private Sub OnstrRelTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblDependents = New EntitySet(Of tblDependent)(AddressOf Me.attach_tblDependents, AddressOf Me.detach_tblDependents)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intRelID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property intRelID() As Integer
		Get
			Return Me._intRelID
		End Get
		Set
			If ((Me._intRelID = value)  _
						= false) Then
				Me.OnintRelIDChanging(value)
				Me.SendPropertyChanging
				Me._intRelID = value
				Me.SendPropertyChanged("intRelID")
				Me.OnintRelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strRelType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property strRelType() As String
		Get
			Return Me._strRelType
		End Get
		Set
			If (String.Equals(Me._strRelType, value) = false) Then
				Me.OnstrRelTypeChanging(value)
				Me.SendPropertyChanging
				Me._strRelType = value
				Me.SendPropertyChanged("strRelType")
				Me.OnstrRelTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblRelationship_tblDependent", Storage:="_tblDependents", ThisKey:="intRelID", OtherKey:="intRelationship")>  _
	Public Property tblDependents() As EntitySet(Of tblDependent)
		Get
			Return Me._tblDependents
		End Get
		Set
			Me._tblDependents.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblDependents(ByVal entity As tblDependent)
		Me.SendPropertyChanging
		entity.tblRelationship = Me
	End Sub
	
	Private Sub detach_tblDependents(ByVal entity As tblDependent)
		Me.SendPropertyChanging
		entity.tblRelationship = Nothing
	End Sub
End Class
